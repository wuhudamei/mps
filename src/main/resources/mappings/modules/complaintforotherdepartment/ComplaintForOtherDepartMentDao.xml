<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.damei.dao.modules.ComplaintForOtherDepartMentDao">

    <sql id="complaintForOtherDepartMentColumns">
        a.id AS "id"

    </sql>

    <sql id="complaintForOtherDepartMentJoins">
    </sql>

    <select id="get" resultType="ComplaintForOtherDepartMent">
        SELECT
        <include refid="complaintForOtherDepartMentColumns"/>
        FROM biz_order_complaint a
        <include refid="complaintForOtherDepartMentJoins"/>
        WHERE a.id = #{id}
    </select>

    <select id="findList" resultType="ComplaintForOtherDepartMent">
        SELECT
        b.store_id as "storeId",
        a.id as "id",
        b.order_number as "orderNumber",
        b.project_mode as "projectMode",
        d.NAME AS "departName",
        CONCAT_WS(
        "-",
        b.community_name,
        b.build_number,
        b.build_unit,
        b.build_room
        ) AS "customerAddress",
        b.customer_name as "customerName",
        b.customer_phone as "customerPhone",
        c.realName as "managerName",
        c.phone as "managerPhone",
        a.create_date as "createDate",
        a.complaint_status as "status",
        e.realName as "complaintPersonName"
        FROM
        biz_order_complaint_pre a
        LEFT JOIN biz_order b ON a.order_id = b.id
        LEFT JOIN biz_employee c ON b.item_manager_id = c.id
        LEFT JOIN biz_engineering_department d ON b.engin_depart_id = d.id
        LEFT JOIN biz_employee e on a.complaint_employee_id = e.id

where 1=1
        <if test="complaintEmployeeId!=null and complaintEmployeeId!=''">
            and  a.complaint_employee_id =#{complaintEmployeeId}

        </if>
        <if test="storeId!=null and storeId!=''">

            and b.store_id = #{storeId}

        </if>
        <if test="projectMode!=null and projectMode!=''">

            and b.project_mode = #{projectMode}

        </if>
        <if test="departId!=null and departId!=''">

            and b.engin_depart_id = #{departId}

        </if>


        <if test="orderNumber!=null and orderNumber!=''">

            and b.order_number = #{orderNumber}

        </if>


        <if test="status!=null and status!=''">

            and a.complaint_status = #{status}

        </if>

        <if test="customerName!=null and customerName!=''">

            and b.customer_name like concat ('%',#{customerName},'%')

        </if>
        <if test="managerName!=null and managerName!=''">

            and c.realName like concat ('%',#{managerName},'%')

        </if>
        <if test="startDate!=null and startDate!=''">

            and  a.create_date >=#{startDate}

        </if>
        <if test="endDate!=null and endDate!=''">

            and a.create_date &lt;=#{endDate}

        </if>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.create_date DESC
            </otherwise>
        </choose>
    </select>


    <select id="findOrderInfoByText" parameterType="map" resultType="map">
        SELECT
        a.id AS "orderId",
        a.order_number AS "orderNumber",
        a.customer_name AS "customerName",
        a.customer_phone AS "customerPhone",
        a.community_name AS "communityName",
        b.label AS "projectMode",
      c.name as "storeName",
        CONCAT_WS(
        "-",
        a.build_number,
        a.build_unit,
        a.build_room
        ) AS "customerAddress",
        a.item_manager as "managerName",
        a.order_inspector as "pqcName",
        d.name as "departName"
        FROM
        biz_order a
        LEFT JOIN sys_dict b ON a.project_mode = b.VALUE
        AND b.type = "project_mode"
        LEFT JOIN  sys_office c on a.store_id = c.id
      LEFT JOIN  biz_engineering_department d on a.engin_depart_id = d.id




        <where>
            a.order_status_number>=200
            <if test="text!=null and text!=''">

                and ( a.customer_name like concat('%',#{text},'%') or a.customer_phone  =#{text} or
                a.order_number =#{text})
            </if>



            <if test="orderId!=null and orderId!=''">

                and  a.id =#{orderId}
            </if>

            <if test="storeId!=null and storeId!=''">

                and  a.store_id =#{storeId}
            </if>

        </where>
    </select>


    <insert id="insert" parameterType="map">

        <selectKey resultType="int"  order="AFTER" keyProperty="complaintPreId" keyColumn="id">
            select last_insert_id();

        </selectKey>
        INSERT INTO biz_order_complaint_pre (


        order_id,
        complaint_source,
        complaint_employee_id,
        complaint_status,
        status_datetime,
        complaint_describe,

        create_date



        ) VALUES (
        #{orderId},
        #{complaintSource},
        #{complaintEmployeeId},
        #{complaintStatus},
        #{statusDateTime},
        #{complaintDescribe},
        #{createDate}



        )

    </insert>


    <!--<insert id="saveProblemInfo" parameterType="map">-->
        <!--<selectKey resultType="int" order="AFTER" keyProperty="problemId" keyColumn="id">-->
            <!--select last_insert_id();-->

        <!--</selectKey>-->

        <!--INSERT INTO biz_order_complaint_problem (-->

            <!--order_complaint_id,-->
            <!--complaint_problem_describe,-->
            <!--status,-->
            <!--create_date-->


        <!--) VALUES (-->
            <!--#{orderComplaintId},-->
            <!--#{complaintDescribe},-->
            <!--#{status},-->
            <!--#{createDate}-->

        <!--)-->
    <!--</insert>-->


    <select id="findDetailById" parameterType="String" resultType="map">
        SELECT
            c.`name` as "storeName",
            a.create_date as "createDate",
            CONCAT_WS(
                    "-",
                    b.build_number,
                    b.build_unit,
                    b.build_room
            ) AS "customerAddress",
            b.order_number as "orderNumber",
            b.customer_name as "customerName",
            b.customer_phone as "customerPhone",
            b.item_manager as "managerName",
            b.order_inspector as "pqcName",
            a.complaint_describe as "complaintDescribe",
            a.id as "id",
            a.status_datetime as "statusDateTime",
            a.status_describe as "statusDescribe",
            a.complaint_status as "complaintStatus"
        FROM
            `biz_order_complaint_pre` a
            LEFT JOIN biz_order b ON a.order_id = b.id
            INNER JOIN sys_office c on b.store_id = c.id

        where a.id =#{_parameter}

    </select>
</mapper>