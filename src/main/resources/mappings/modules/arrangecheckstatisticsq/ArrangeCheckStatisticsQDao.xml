<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.damei.dao.modules.ArrangeCheckStatisticsQDao">
    
	<sql id="arrangeCheckStatisticsQColumns">
		a.id AS "id",
		a.qc_bill_code AS "qcBillCode",
		a.qc_bill_type AS "qcBillType",
		a.is_recheck AS "isRecheck",
		a.related_qc_bill_id AS "relatedQcBillId",
		a.order_id AS "orderId",
		a.qc_check_node_id AS "qcCheckNodeId",
		a.apply_remarks AS "applyRemarks",
		a.status AS "status",
		a.apply_employee_id AS "applyEmployeeId",
		a.check_employee_id AS "checkEmployeeId",
		a.check_datetime AS "checkDatetime",
		a.expect_check_datetime AS "expectCheckDatetime",
		a.accept_check_datetime AS "acceptCheckDatetime",
		a.total_score AS "totalScore",
		a.got_score AS "gotScore",
		a.remarks AS "remarks",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.recheck_times AS "recheckTimes",
		a.check_words AS "checkWords",
		a.review_status AS "reviewStatus",
		a.review_remark AS "reviewRemark",
		a.review_datetime AS "reviewDatetime",
		a.plan_check_datetime AS "planCheckDatetime",
		a.delay_reason_pm AS "delayReasonPm",
		a.delay_reason_qc AS "delayReasonQc"
	</sql>
	
	<sql id="arrangeCheckStatisticsQJoins">
	</sql>
    
	<select id="get" resultType="ArrangeCheckStatisticsQ">
		SELECT 
			<include refid="arrangeCheckStatisticsQColumns"/>
		FROM biz_qc_bill a
		<include refid="arrangeCheckStatisticsQJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findPage" resultType="cn.damei.entity.modules.ArrangeCheckStatisticsQ" parameterType="cn.damei.entity.modules.ArrangeCheckStatisticsQ">
				SELECT
					c.accept_check_datetime AS datetime,
					c. NAME AS storeName,
						c.id as storeId,
					c.qc_check_node_name AS checknodename,
					c.qc_check_node_index AS  qcchecknodeindex,
					(
						CASE
						WHEN c.count1 IS NULL THEN
							0
						ELSE
							c.count1
						END
					) AS industry,
					(
						CASE
						WHEN v.count2 IS NULL THEN
							0
						ELSE
							v.count2
						END
					) AS tradition,
					(
						(
							CASE
							WHEN c.count1 IS NULL THEN
								0
							ELSE
								c.count1
							END
						) + (
							CASE
							WHEN v.count2 IS NULL THEN
								0
							ELSE
								v.count2
							END
						)
					) AS total
					FROM
						(
							SELECT
								COUNT(1) AS count2,
								b.store_id,
								s. NAME,
								s.id,
								q.accept_check_datetime,
								qn.qc_check_node_name,
								qn.qc_check_node_index 
							FROM
								sys_office s,
								biz_order b,
								biz_qc_bill q,
								biz_qc_check_node qn
							WHERE
								b.store_id = s.id
							AND b.project_mode = 2
							AND b.id = q.order_id
							AND q.qc_check_node_id = qn.id
							AND q.status >= 10
					<if test="qcBillType != null and qcBillType != ''">
						AND b.store_id = #{qcBillType}
					</if>
				<if test="acceptCheckDatetimeStart != null and acceptCheckDatetimeStart != ''">
					AND q.accept_check_datetime &gt;=#{acceptCheckDatetimeStart}
				</if>
				<if test="acceptCheckDatetimeEnd != null and acceptCheckDatetimeEnd != ''">
					AND q.accept_check_datetime &lt;=#{acceptCheckDatetimeEnd}
				</if>
				
							AND qn.qc_check_node_index IN ('1', '2', '3', '6', '9')
							GROUP BY
								qn.qc_check_node_name,
								s. NAME
							ORDER BY
								qn.qc_check_node_index
						) v  RIGHT JOIN (
						SELECT
							COUNT(1) AS count1,
							b.store_id,
							s. NAME,
							s.id,
							q.accept_check_datetime,
							qn.qc_check_node_name,
							qn.qc_check_node_index 
						FROM
							sys_office s,
							biz_order b,
							biz_qc_bill q,
							biz_qc_check_node qn
						WHERE
							b.store_id = s.id
						AND b.project_mode = 1
						AND b.id = q.order_id
						AND q.qc_check_node_id = qn.id
						AND q.status >= 10
					<if test="qcBillType != null and qcBillType != ''">
						AND b.store_id = #{qcBillType}
					</if>
				<if test="acceptCheckDatetimeStart != null and acceptCheckDatetimeStart != ''">
					AND q.accept_check_datetime &gt;=#{acceptCheckDatetimeStart}
				</if>
				<if test="acceptCheckDatetimeEnd != null and acceptCheckDatetimeEnd != ''">
					AND q.accept_check_datetime &lt;=#{acceptCheckDatetimeEnd}
				</if>	
						AND qn.qc_check_node_index IN ('1', '2', '3', '6', '9')
						GROUP BY
							qn.qc_check_node_name,
							s. NAME
						ORDER BY
							qn.qc_check_node_index
					) c ON v.qc_check_node_name = c.qc_check_node_name
	</select>
	
	<select id="findListBak" resultType="ArrangeCheckStatisticsQ">
		SELECT 
			<include refid="arrangeCheckStatisticsQColumns"/>
		FROM biz_qc_bill a
		<include refid="arrangeCheckStatisticsQJoins"/>
		<where>
			
			<if test="qcBillType != null and qcBillType != ''">
				AND a.qc_bill_type LIKE 
					<if test="dbName == 'oracle'">'%'||#{qcBillType}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{qcBillType}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{qcBillType},'%')</if>
			</if>
			<if test="acceptCheckDatetime != null and acceptCheckDatetime != ''">
				AND a.accept_check_datetime LIKE 
					<if test="dbName == 'oracle'">'%'||#{acceptCheckDatetime}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{acceptCheckDatetime}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{acceptCheckDatetimeString},'%')</if>
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="ArrangeCheckStatisticsQ">
		SELECT 
			<include refid="arrangeCheckStatisticsQColumns"/>
		FROM biz_qc_bill a
		<include refid="arrangeCheckStatisticsQJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO biz_qc_bill(
			id,
			qc_bill_code,
			qc_bill_type,
			is_recheck,
			related_qc_bill_id,
			order_id,
			qc_check_node_id,
			apply_remarks,
			status,
			apply_employee_id,
			check_employee_id,
			check_datetime,
			expect_check_datetime,
			accept_check_datetime,
			total_score,
			got_score,
			remarks,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag,
			recheck_times,
			check_words,
			review_status,
			review_remark,
			review_datetime,
			plan_check_datetime,
			delay_reason_pm,
			delay_reason_qc
		) VALUES (
			#{id},
			#{qcBillCode},
			#{qcBillType},
			#{isRecheck},
			#{relatedQcBillId},
			#{orderId},
			#{qcCheckNodeId},
			#{applyRemarks},
			#{status},
			#{applyEmployeeId},
			#{checkEmployeeId},
			#{checkDatetime},
			#{expectCheckDatetime},
			#{acceptCheckDatetime},
			#{totalScore},
			#{gotScore},
			#{remarks},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag},
			#{recheckTimes},
			#{checkWords},
			#{reviewStatus},
			#{reviewRemark},
			#{reviewDatetime},
			#{planCheckDatetime},
			#{delayReasonPm},
			#{delayReasonQc}
		)
	</insert>
	
	<update id="update">
		UPDATE biz_qc_bill SET 	
			qc_bill_code = #{qcBillCode},
			qc_bill_type = #{qcBillType},
			is_recheck = #{isRecheck},
			related_qc_bill_id = #{relatedQcBillId},
			order_id = #{orderId},
			qc_check_node_id = #{qcCheckNodeId},
			apply_remarks = #{applyRemarks},
			status = #{status},
			apply_employee_id = #{applyEmployeeId},
			check_employee_id = #{checkEmployeeId},
			check_datetime = #{checkDatetime},
			expect_check_datetime = #{expectCheckDatetime},
			accept_check_datetime = #{acceptCheckDatetime},
			total_score = #{totalScore},
			got_score = #{gotScore},
			remarks = #{remarks},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			recheck_times = #{recheckTimes},
			check_words = #{checkWords},
			review_status = #{reviewStatus},
			review_remark = #{reviewRemark},
			review_datetime = #{reviewDatetime},
			plan_check_datetime = #{planCheckDatetime},
			delay_reason_pm = #{delayReasonPm},
			delay_reason_qc = #{delayReasonQc}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE biz_qc_bill SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>