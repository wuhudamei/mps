<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.damei.dao.modules.BizCustomerReturnVisitRecordDao">

	<sql id="bizCustomerReturnVisitRecordColumns">
		g.phone AS orderInspectorPhone,
		f.phone AS itemManagerPhone,
		e.name AS areaName,
		d.value AS projectMode,
		d.label AS projectModeName,
		c.name AS storeName,
		b.designer_phone AS designerPhone,
		b.area AS area,
		b.store_id AS storeId,
		b.actual_start_date AS actualStartDate,
		b.order_inspector AS orderInspector,
		b.item_manager AS itemManager,
		b.designer_name AS designerName,
		b.customer_address AS customerAddress,
		b.customer_name AS customerName,
		b.customer_phone AS customerPhone,
		b.order_number AS orderNumber,
		a.id AS "id",
		a.order_id AS "orderId",
		a.custom_service_id AS "customServiceId",
		a.custom_service_name AS "customServiceName",
		a.return_visit_time AS "returnVisitTime",
		a.return_visit_node AS "returnVisitNode",
		a.return_visit_node_name AS "returnVisitNodeName",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
	</sql>

	<sql id="bizCustomerReturnVisitRecordJoins">
		,biz_order b,
		sys_office c,
		sys_dict d,
		biz_engineering_department e,
		biz_employee f,
		biz_employee g
	</sql>

	<select id="get" resultType="cn.damei.entity.modules.BizCustomerReturnVisitRecord">
		SELECT
			<include refid="bizCustomerReturnVisitRecordColumns"/>
		from biz_customer_return_visit_record a
		left join biz_order b on a.order_id = b.id
		left join sys_office c on b.store_id = c.id
		left join sys_dict d on d.type = 'project_mode' and b.project_mode = d.`value`
		left join biz_engineering_department e on e.id=b.engin_depart_id
		left join biz_employee f on b.item_manager_id=f.id
		left join biz_employee g on b.order_inspector_id=g.id
		WHERE a.id = #{id}
	</select>

	<select id="invalidList" resultType="cn.damei.entity.modules.BizCustomerReturnVisitRecord">
		select
		a.order_id AS "orderId",
		a.invalid_reason AS invalidReason,
		a.custom_service_name  AS "customServiceName",
		a.return_visit_node AS "returnVisitNode",
		a.return_visit_node_name AS "returnVisitNodeName",
		a.return_visit_time As "invalid",
		b.customer_address  AS customerAddress,
		b.store_id AS storeId,
		b.project_mode As projectMode,
		b.order_number As orderNumber,
		b.customer_name AS customerName
		from biz_customer_return_visit_invalid_record a
		left join biz_order b on a.order_id = b.id
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="storeId != null and storeId != ''">
				AND b.store_id = #{storeId}
			</if>
			<if test="projectMode != null and projectMode != ''">
				AND b.project_mode = #{projectMode}
			</if>
			<if test="orderNumber != null and orderNumber != ''">
				AND b.order_number like concat('%',#{orderNumber},'%')
			</if>
			<if test="returnVisitNode != null and returnVisitNode != ''">
				AND a.return_visit_node = #{returnVisitNode}
			</if>
			<if test="customerName != null and customerName != ''">
				AND b.customer_name like concat('%', #{customerName},'%')
			</if>
			<if test="customServiceName != null and customServiceName != ''">
				AND a.custom_service_name like concat('%', #{customServiceName},'%')
			</if>
			<if test="invalidDateBegin != null and invalidDateBegin != ''">
				AND a.return_visit_time &gt;= concat(#{invalidDateBegin},' 00:00:00')
			</if>
			<if test="invalidDateEnd != null and invalidDateEnd != ''">
				AND a.return_visit_time &lt;  concat(#{invalidDateEnd},' 23:59:59')
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findList" resultType="cn.damei.entity.modules.BizCustomerReturnVisitRecord">
		SELECT
			<include refid="bizCustomerReturnVisitRecordColumns"/>,
			ifnull(p.invalidNum,0) invalidNum
		from biz_customer_return_visit_record a
		left join biz_order b on a.order_id = b.id
		left join sys_office c on b.store_id = c.id
		left join sys_dict d on d.type = 'project_mode' and b.project_mode = d.`value`
		left join biz_engineering_department e on e.id=b.engin_depart_id
		left join biz_employee f on b.item_manager_id=f.id
		left join biz_employee g on b.order_inspector_id=g.id
		left join ( select order_id,return_visit_node,count(*) invalidNum
		from biz_customer_return_visit_invalid_record  group by order_id,return_visit_node  ) p
		on a.order_id = p.order_id and a.return_visit_node = p.return_visit_node
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="isValid==1 or isValid==null">
				AND (p.invalidNum is null or p.invalidNum &lt; 3)
			</if>
			<if test="isValid==2">
				AND p.invalidNum &gt;=3
			</if>
			<if test="storeId != null and storeId != ''">
				AND b.store_id = #{storeId}
			</if>
			<if test="projectMode != null and projectMode != ''">
				AND d.value = #{projectMode}
			</if>
			<if test="area != null and area != ''">
				AND e.id = #{area}
			</if>
			<if test="orderNumber != null and orderNumber != ''">
				AND b.order_number like concat('%',#{orderNumber},'%')
			</if>
			<if test="returnVisitNode != null and returnVisitNode != ''">
				AND a.return_visit_node = #{returnVisitNode}
			</if>
			<if test="customerPhone != null and customerPhone != ''">
				AND b.customer_phone like concat('%', #{customerPhone},'%')
			</if>
			<if test="customerName != null and customerName != ''">
				AND b.customer_name like concat('%', #{customerName},'%')
			</if>
			<if test="designerName != null and designerName != ''">
				AND b.designer_name like concat('%', #{designerName},'%')
			</if>
			<if test="itemManager != null and itemManager != ''">
				AND b.item_manager like concat('%', #{itemManager},'%')
			</if>
			<if test="orderInspector != null and orderInspector != ''">
				AND b.order_inspector like concat('%', #{orderInspector},'%')
			</if>
			<if test="customServiceName != null and customServiceName != ''">
				AND a.custom_service_name like concat('%', #{customServiceName},'%')
			</if>
			<!-- <if test="visitDateBegin != null and visitDateBegin != ''and visitDateEnd != null and visitDateEnd != ''">
				AND (a.return_visit_time between #{visitDateBegin} and #{visitDateEnd})
			</if> -->
			<if test="visitDateBegin != null and visitDateBegin != ''">
				AND a.return_visit_time &gt;= concat(#{visitDateBegin},' 00:00:00')
			</if>
			<if test="visitDateEnd != null and visitDateEnd != ''">
				AND a.return_visit_time &lt;  concat(#{visitDateEnd},' 23:59:59')
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findPageForChecking1" resultType="cn.damei.entity.modules.BizCustomerReturnVisitRecord">
		select
				e.name AS areaName,
				m.id AS orderId,
				m.store_id AS storeId,
				m.actual_start_date AS actualStartDate,
				m.order_inspector AS orderInspector,
				m.item_manager AS itemManager,
				m.designer_name AS designerName,
				m.customer_address AS customerAddress,
				m.customer_name AS customerName,
				m.customer_phone AS customerPhone,
				m.order_number AS orderNumber,
				m.project_mode AS projectMode,
				m2.checkNode AS returnVisitNode,
				f.return_visit_node AS returnVisitNodeName,
				m2.checkDateTime AS nodeCheckDate,
				boe.is_enabled AS enabled,
				ifnull(g.invalidNum,0) invalidNum
			from biz_order m
			inner join  (
				select x.order_id,max(x.checkNode) AS checkNode,max(x.checkDateTime) checkDateTime from (
					select order_id,0 AS checkNode,create_date AS checkDateTime from biz_order_confirm_startwork
					union
					select a.order_id,a.qc_check_node_id AS checkNode,a.accept_check_datetime  AS checkDateTime
					  from biz_customer_return_visit c ,biz_qc_bill a
					 where a.qc_bill_type=1
					   and a.is_recheck=0
					   and a.status  &gt;= 10
					   and c.project_node = a.qc_check_node_id
				 	   and c.del_flag = 0
			 	) x
			 	group by x.order_id
			) m2 on m2.order_id = m.id
			left join(select y.order_id,y.return_visit_node,ifnull(COUNT(1),0) AS num from  biz_customer_return_visit_record y group by y.order_id,y.return_visit_node) y2 on m2.order_id = y2.order_id and y2.return_visit_node = m2.checkNode
			left join biz_engineering_department e on e.id = m.engin_depart_id
			left join biz_customer_return_visit f on m2.checkNode = f.project_node and f.del_flag = 0
			left join ( select order_id,return_visit_node,count(*) invalidNum from biz_customer_return_visit_invalid_record  group by order_id,return_visit_node  ) g on m2.order_id = g.order_id and m2.checkNode = g.return_visit_node
			left join (select order_id,is_enabled from biz_customer_return_visit_order_enable group by order_id) boe on m2.order_id = boe.order_id
			where f.return_visit_node is not null and (y2.num &lt; 1 or y2.num is NULL)

			<if test="storeId != null and storeId != ''">
				AND m.store_id = #{storeId}
			</if>
			<if test="projectMode != null and projectMode != ''">
				AND m.project_mode = #{projectMode}
			</if>
			<if test="area != null and area != ''">
				AND e.id = #{area}
			</if>
			<if test="orderNumber != null and orderNumber != ''">
				AND m.order_number like concat('%',#{orderNumber},'%')
			</if>
			<if test="returnVisitNode != null and returnVisitNode != ''">
				AND f.project_node = #{returnVisitNode}
			</if>
			<if test="customerPhone != null and customerPhone != ''">
				AND m.customer_phone like concat('%', #{customerPhone},'%')
			</if>
			<if test="customerName != null and customerName != ''">
				AND m.customer_name like concat('%', #{customerName},'%')
			</if>
			<if test="designerName != null and designerName != ''">
				AND m.designer_name like concat('%', #{designerName},'%')
			</if>
			<if test="itemManager != null and itemManager != ''">
				AND m.item_manager like concat('%', #{itemManager},'%')
			</if>
			<if test="orderInspector != null and orderInspector != ''">
				AND m.order_inspector like concat('%', #{orderInspector},'%')
			</if>

			<if test="nodeCheckDateBegin != null ">
				AND m2.checkDateTime &gt;= concat(#{nodeCheckDateBegin},' 00:00:00')
			</if>
			<if test="nodeCheckDateEnd != null ">
				AND m2.checkDateTime &lt;  concat(#{nodeCheckDateEnd},' 23:59:59')
			</if>
			<if test="enabled != null">
				<if test="enabled==1">
				AND (boe.is_enabled = 1 or boe.is_enabled is null)
				</if>
				<if test="enabled!=1">
				AND (boe.is_enabled = 0 and  boe.is_enabled is not null)
				</if>
			</if>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY m2.checkDateTime  DESC
			</otherwise>
		</choose>
	</select>

	<select id="findPageForChecking" resultType="cn.damei.entity.modules.BizCustomerReturnVisitRecord">
		select
				e.name AS areaName,
				m.id AS orderId,
				m.store_id AS storeId,
				m.actual_start_date AS actualStartDate,
				m.order_inspector AS orderInspector,
				m.item_manager AS itemManager,
				m.designer_name AS designerName,
				m.customer_address AS customerAddress,
				m.customer_name AS customerName,
				m.customer_phone AS customerPhone,
				m.order_number AS orderNumber,
				m.project_mode AS projectMode,
				m2.checkNode AS returnVisitNode,
				f.return_visit_node AS returnVisitNodeName,
				m2.checkDateTime AS nodeCheckDate,
				boe.is_enabled AS enabled,
				ifnull(g.invalidNum,0) invalidNum
		from biz_order m
		INNER join  (
            select x.order_id,max(x.checkNode) AS checkNode,max(x.checkDateTime) checkDateTime from (
                select order_id,0 AS checkNode,create_date AS checkDateTime from biz_order_confirm_startwork
                union
                select a.order_id,a.qc_check_node_id AS checkNode,a.accept_check_datetime  AS checkDateTime
                  from biz_customer_return_visit c ,biz_qc_bill a
                 where a.qc_bill_type=1
                   and a.is_recheck=0
                   and a.status  &gt;= 10
                   and c.project_node = a.qc_check_node_id
                   and c.del_flag = 0
            ) x
            group by x.order_id
		) m2 on m2.order_id = m.id
		left join(select y.order_id,y.return_visit_node,ifnull(COUNT(1),0) AS num from  biz_customer_return_visit_record y group by y.order_id,y.return_visit_node) y2 on m2.order_id = y2.order_id and y2.return_visit_node = m2.checkNode
        left join biz_engineering_department e on e.id = m.engin_depart_id
		INNER join biz_customer_return_visit f on m2.checkNode = f.project_node and f.del_flag = 0 and m.store_id = f.store_id and f.project_mode=m.project_mode
        left join ( select order_id,return_visit_node,count(*) invalidNum from biz_customer_return_visit_invalid_record  group by order_id,return_visit_node  ) g on m2.order_id = g.order_id and m2.checkNode = g.return_visit_node
		left join (select order_id,is_enabled from biz_customer_return_visit_order_enable group by order_id) boe on m2.order_id = boe.order_id
        where f.return_visit_node is not null and (y2.num &lt; 1 or y2.num is NULL)  and (boe.is_enabled=1 or boe.is_enabled is null)
        and (g.invalidNum is null or g.invalidNum &lt; 3)

			<if test="storeId != null and storeId != ''">
				AND m.store_id = #{storeId}
			</if>
			<choose>
				<when test="projectMode != null and projectMode != ''">
					AND m.project_mode = #{projectMode}
				</when>
				<otherwise>
					AND m.project_mode in(1,4)
				</otherwise>
			</choose>
			<if test="area != null and area != ''">
				AND e.id = #{area}
			</if>
			<if test="orderNumber != null and orderNumber != ''">
				AND m.order_number like concat('%',#{orderNumber},'%')
			</if>
			<if test="returnVisitNode != null and returnVisitNode != ''">
				AND f.project_node = #{returnVisitNode}
			</if>
			<if test="customerPhone != null and customerPhone != ''">
				AND m.customer_phone like concat('%', #{customerPhone},'%')
			</if>
			<if test="customerName != null and customerName != ''">
				AND m.customer_name like concat('%', #{customerName},'%')
			</if>
			<if test="designerName != null and designerName != ''">
				AND m.designer_name like concat('%', #{designerName},'%')
			</if>
			<if test="itemManager != null and itemManager != ''">
				AND m.item_manager like concat('%', #{itemManager},'%')
			</if>
			<if test="orderInspector != null and orderInspector != ''">
				AND m.order_inspector like concat('%', #{orderInspector},'%')
			</if>

			<if test="nodeCheckDateBegin != null ">
				AND m2.checkDateTime &gt;= concat(#{nodeCheckDateBegin},' 00:00:00')
			</if>
			<if test="nodeCheckDateEnd != null ">
				AND m2.checkDateTime &lt;  concat(#{nodeCheckDateEnd},' 23:59:59')
			</if>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY m2.checkDateTime  DESC
			</otherwise>
		</choose>
	</select>

	<select id="getOrderInfoForCheck" resultType="map">
		select
				a.customer_name AS customerName,
				a.customer_phone AS customerPhone,
				a.detail_address AS detailAddress,
				a.contract_start_date AS contractStartDate,
				a.contract_end_date AS contractEndDate,
				b.realName AS inspectorName,
				b.phone AS inspectorPhone,
				a.designer_name AS designerName,
				a.designer_phone AS designerPhone,
				a.service_name AS serviceName,
				a.service_phone AS servicePhone,
				c.realName AS managerName,
				c.phone AS managePhone,
				<choose>
					<when test="returnVisitNode == 0">
						h.create_date AS checkDatetime
					</when>
					<otherwise>
						d.accept_check_datetime AS checkDatetime
					</otherwise>
				</choose>
	  from biz_order a
		LEFT JOIN biz_employee b on a.order_inspector_id = b.id
		LEFT JOIN biz_employee c on a.item_manager_id = c.id
		<choose>
			<when test="returnVisitNode == 0">
		LEFT JOIN biz_order_confirm_startwork h on h.order_id = a.id
		where a.id = ${orderId}
			</when>
			<otherwise>
		LEFT JOIN biz_qc_bill d ON a.id = d.order_id and d.is_recheck=0
		where d.qc_check_node_id = ${returnVisitNode} and a.id = ${orderId}
			</otherwise>
		</choose>

	</select>

	<!-- 回访日报查询 -->
	<select id="visitRecordSummaryQuery" resultType="map" parameterType="map">
		select x.visit_node,x.custom_service_name,x.num from (
			select concat('node_',CAST(a.return_visit_node as CHAR) ) as visit_node,a.custom_service_name,count(a.custom_service_name) num
			  from biz_customer_return_visit_record a
			 where a.del_flag = 0
			<if test="returnVisitTimeBegin != null ">
				AND a.return_visit_time &gt;= concat(#{returnVisitTimeBegin},' 00:00:00')
			</if>
			<if test="returnVisitTimeEnd != null ">
				AND a.return_visit_time &lt;  concat(#{returnVisitTimeEnd},' 23:59:59')
			</if>
			    AND a.order_id in ( select id from biz_order where store_id = ${storeId} )
			group by a.return_visit_node,a.custom_service_name
			union
			select 'node_9999' as visit_node,custom_service_name,count(*) num
			  from biz_customer_return_visit_invalid_record
			 where 1=1
			<if test="returnVisitTimeBegin != null ">
				AND return_visit_time &gt;= concat(#{returnVisitTimeBegin},' 00:00:00')
			</if>
			<if test="returnVisitTimeEnd != null ">
				AND return_visit_time &lt;  concat(#{returnVisitTimeEnd},' 23:59:59')
			</if>
			    AND order_id in ( select id from biz_order where store_id = ${storeId} )
			 group by custom_service_name
		) x ORDER BY x.custom_service_name ASC,x.visit_node ASC
	</select>

	<!-- 回访满意度查询 -->
	<select id="satisfactionDegreeQuery" resultType="map" parameterType="map">
		select m.department_name,GROUP_CONCAT( m.statistic_item ) statistic_item from (
			select x.label as department_name,x.value as department_code,concat('|',y.statistics_result,'|_',count(y.statistics_result)) as statistic_item from
			(
				select `value`,label from sys_dict where type = 'return_visit_statistics_department' and value in (
					select statistics_department from biz_customer_return_visit_record_answer where statistics_department > 0
				)
			) x left join biz_customer_return_visit_record_answer y on x.`value` = y.statistics_department
		  	   where y.return_visit_record_id in (
					select id from biz_customer_return_visit_record
					 where 1=1
					 <if test="returnVisitTimeBegin != null ">
						AND return_visit_time &gt;= concat(#{returnVisitTimeBegin},' 00:00:00')
					</if>
					<if test="returnVisitTimeEnd != null ">
						AND return_visit_time &lt;  concat(#{returnVisitTimeEnd},' 23:59:59')
					</if>
					AND order_id in(  select id from biz_order where store_id = ${storeId} )
				)
			group by x.label,x.value,y.statistics_result
		) m group by m.department_name,m.department_code
		order by m.department_code asc
	</select>


	<select id="getOrderHistoryVisitRecord" resultType="map" >
		select 	x.return_visit_node,x.return_visit_node_name,
			 	y.return_visit_question,y.question_answer
		  from biz_customer_return_visit_record x 
		  left join biz_customer_return_visit_record_answer y on x.id = y.return_visit_record_id 
		 where x.order_id = ${orderId}  
		 order by x.return_visit_node asc
	</select>

	<insert id="insert"  useGeneratedKeys="true" keyProperty="id">
		INSERT INTO biz_customer_return_visit_record(
			order_id,
			custom_service_id,
			custom_service_name,
			return_visit_time,
			return_visit_node,
			return_visit_node_name,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{orderId},
			#{customServiceId},
			#{customServiceName},
			#{returnVisitTime},
			#{returnVisitNode},
			#{returnVisitNodeName},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>

	<update id="update">
		UPDATE biz_customer_return_visit_record SET 	
			order_id = #{orderId},
			custom_service_id = #{customServiceId},
			custom_service_name = #{customServiceName},
			return_visit_time = #{returnVisitTime},
			return_visit_node = #{returnVisitNode},
			return_visit_node_name = #{returnVisitNodeName},
			create_by = #{createBy.id},
			create_date = #{createDate},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			del_flag = #{delFlag}
		WHERE id = #{id}
	</update>

	<update id="delete">
		UPDATE biz_customer_return_visit_record SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	<select id="findProjectMode"  resultType="cn.damei.entity.modules.Dict">
		SELECT
		`value`,
		label
		FROM
		sys_dict
		WHERE
		type = 'project_mode'
		AND
		VALUE
		IN (1,4)
	</select>

</mapper>