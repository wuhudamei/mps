<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.damei.dao.modules.BizPmOwnpayCnfgSnapDao">
    
	<sql id="bizPmOwnpayCnfgSnapColumns">
		a.id AS "id",
		a.store_id AS "storeId",
		a.order_id AS "orderId",
		a.is_old_new AS "isOldNew",
		a.project_mode AS "projectMode",
		a.ownpay_name AS "ownpayName",
		a.unit AS "unit",
		a.amount AS "amount",
		a.remarks AS "remarks",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="bizPmOwnpayCnfgSnapJoins">
	</sql>
    
	<select id="get" resultType="cn.damei.entity.modules.BizPmOwnpayCnfgSnap">
		SELECT 
			<include refid="bizPmOwnpayCnfgSnapColumns"/>
		FROM biz_pm_ownpay_cnfg_snap a
		<include refid="bizPmOwnpayCnfgSnapJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="cn.damei.entity.modules.BizPmOwnpayCnfgSnap">
		SELECT 
			<include refid="bizPmOwnpayCnfgSnapColumns"/>
		FROM biz_pm_ownpay_cnfg_snap a
		<include refid="bizPmOwnpayCnfgSnapJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="cn.damei.entity.modules.BizPmOwnpayCnfgSnap">
		SELECT 
			<include refid="bizPmOwnpayCnfgSnapColumns"/>
		FROM biz_pm_ownpay_cnfg_snap a
		<include refid="bizPmOwnpayCnfgSnapJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO biz_pm_ownpay_cnfg_snap(
			id,
			store_id,
			order_id,
			is_old_new,
			project_mode,
			ownpay_name,
			unit,
			amount,
			remarks,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{id},
			#{storeId},
			#{orderId},
			#{isOldNew},
			#{projectMode},
			#{ownpayName},
			#{unit},
			#{amount},
			#{remarks},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE biz_pm_ownpay_cnfg_snap SET 	
			store_id = #{storeId},
			order_id = #{orderId},
			is_old_new = #{isOldNew},
			project_mode = #{projectMode},
			ownpay_name = #{ownpayName},
			unit = #{unit},
			amount = #{amount},
			remarks = #{remarks},
			update_by = #{updateBy.id},
			update_date = #{updateDate}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE biz_pm_ownpay_cnfg_snap SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	<delete id="deleteByOrderId">
		delete from biz_pm_ownpay_cnfg_snap where order_id = #{0}
	</delete>
	
	<select id="findListByMap" resultType="cn.damei.entity.modules.BizPmOwnpayCnfgSnap">
		select 
			a.store_id as "storeId",
			a.is_old_new as "isOldNew",
			a.project_mode as "projectMode",
			a.ownpay_name as "ownpayName",
			a.unit as "unit",
			a.amount as "amount"
		from biz_pm_ownpay_cnfg a 
		<where>
			and a.store_id = #{storeId} 
			<if test="isOldNew != null and isOldNew != ''">
				and a.is_old_new = #{isOldNew} 
			</if>
			and a.project_mode = #{projectMode} 
			and a.is_enabled = #{isEnabled}
		</where>
	</select>
	
	<select id="findByOrderId" resultType="cn.damei.entity.modules.BizPmOwnpayCnfgSnap">
		SELECT 
			<include refid="bizPmOwnpayCnfgSnapColumns"/>
		FROM biz_pm_ownpay_cnfg_snap a
		<include refid="bizPmOwnpayCnfgSnapJoins"/>
		WHERE a.order_id = #{0}
	</select>
	
	<insert id="insertList">
		INSERT INTO biz_pm_ownpay_cnfg_snap(
			id,
			store_id,
			order_id,
			is_old_new,
			project_mode,
			ownpay_name,
			unit,
			amount,
			remarks,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES 
		<foreach collection="list" index="index" item="item" separator=",">
		(
			#{item.id},
			#{item.storeId},
			#{item.orderId},
			#{item.isOldNew},
			#{item.projectMode},
			#{item.ownpayName},
			#{item.unit},
			#{item.amount},
			#{item.remarks},
			#{item.createBy.id},
			#{item.createDate},
			#{item.updateBy.id},
			#{item.updateDate},
			#{item.delFlag}
		)
		</foreach>
	</insert>
</mapper>